import React, { useEffect, useState } from 'react';
import twitterLogo from './assets/twitter-logo.svg';
import './App.css';
import SelectCharacter from './Components/SelectCharacter';
import Arena from './Components/Arena';
import LoadingIndicator from './Components/LoadingIndicator';
import {CONTRACT_ADDRESS, transformCharacterData} from './constants';
import myEpicGame from './utils/MyEpicGame.json';
import { ethers } from 'ethers';

const checkNetwork = async () => {
  try {
  if (window.etherum.networkVersion !== '4') {
    alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Rinkeby –≤ MetaMask!');
  }
  } catch(e) {
    console.error(e);
  }
}

const App = () => {

  const [currentAccount, setCurrentAccount] = useState(null);
  const [characterNFT, setCharacterNFT] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const renderContent = () => {

    if (isLoading) {
      return <LoadingIndicator />
    }

    if (!currentAccount) {
      return (<React.Fragment>
          <p className="sub-text">–°–æ–∑–¥–∞–π NFT –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏ –ª–æ–∫–æ–º–æ—Ç–∏–≤ –ì–µ–π–±–∞<br/> —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–≤–∞–∂–Ω—ã—Ö –¥—Ä—É–∑–µ–π!</p>
          <div className="connect-wallet-container">
            <img
              src="https://media.giphy.com/media/AcbborW0z5XW0/giphy.gif"
            />

            <button
              className="cta-button connect-wallet-button"
              onClick={connectWalletAction}
              >
              –ü–æ–¥–∫–ª—é—á–∏ MetaMask –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
              </button>


              <div className="tutorial-container">
                <h1>–ù–æ–≤–∏—á–µ–∫? üê£</h1>
                <ol>
                  <li><a className="footer-text" href="https://metamask.io/" target="_blank">–£—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ—à–µ–ª–µ–∫ MetaMask</a>. –¢—ã –ø–æ–ª—É—á–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å - —ç—Ç–æ —Å—á–∏—Ç–∞–π —Ç–≤–æ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ù–∞ –Ω–µ–º —Ç—ã –±—É–¥–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å ETH, –∏–≥—Ä–æ–≤—ã–µ NFT –∏ –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã.</li>
                  <li><a className="footer-text " href="https://devtonight.com/posts/metamask-testnet-wallet-setup-for-blockchain-development" target="_blank">–í–∫–ª—é—á–∏ —Ç–µ—Å—Ç-—Å–µ—Ç—å Rinkeby –≤ Metamask</a>. –ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–µ–π –∏–≥—Ä–∞ —Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç—Ñ–∏—Ä–∞, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ.</li>
                  <li><a className="footer-text " href="https://faucets.chain.link/rinkeby" target="_blank">–ü–æ–ª—É—á–∏ —Ç–µ—Å—Ç–æ–≤—ã–π ETH</a>. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –í—Å—Ç–∞–≤—å –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ.</li>
                </ol>
                
                –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –ö—Ä–∏–ø—Ç–µ! üòé –ü–æ—Å–ª–µ —ç—Ç–∏—Ö —à–∞–≥–æ–≤ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å –¥–µ–Ω—å–≥–∞–º–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è NFT –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
              </div>
          </div>
      </React.Fragment>);
    } else if (currentAccount && !characterNFT) {
      return <SelectCharacter setCharacterNFT={setCharacterNFT} />
    } else if (currentAccount && characterNFT) {
      return <Arena characterNFT={characterNFT}  setCharacterNFT={setCharacterNFT} />
    }
  };

  const checkIsWalletIsConnected = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        console.log('Make sure you connected MetaMask');
          setIsLoading(false);
        return;
      } else {
        console.log('We have connection!', ethereum);

        const accounts = await ethereum.request(
          {method: 'eth_accounts'}
        );

        if (accounts.length !== 0) {
            const account = accounts[0];
            console.log('Found active account:', account);
            setCurrentAccount(account);
        } else {
          console.log('No active accounts found');
        }
      }
    } catch (e) {
      console.log(e);
    }

    setIsLoading(false);
  }

  const connectWalletAction = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        alert('Get MetaMask!');
        return;
      }

      const accounts = await ethereum.request({
        method: 'eth_requestAccounts'
      });

      console.log('Connected:', accounts[0]);
      setCurrentAccount(accounts[0]);
     } catch (e) {
       console.log(e);
     }
  }

  useEffect(() => {
      setIsLoading(true);
      checkIsWalletIsConnected();
  }, []);

  useEffect(() => {
    const fetchNFTMetadata = async () => {
      console.log('Checking NFT for address: ', currentAccount);

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const gameContract = new ethers.Contract(
        CONTRACT_ADDRESS,
        myEpicGame.abi,
        signer
      );

      const txn = await gameContract.checkIfUserHasNFT();
      
      if (txn.name) {
        console.log('User has Character NFT:', txn.name);
        setCharacterNFT(transformCharacterData(txn));
      } else {
        console.log('No Character NFT found');
      }

      setIsLoading(false);
    }

    if (currentAccount) {
      console.log('Current Account: ', currentAccount);
      fetchNFTMetadata();
    }

  }, [currentAccount]);

  return (
    <div className="App">
      <div className="container">
        <div className="header-container">
          <p className="header gradient-text">‚öîÔ∏è –£–Ω–∏—á—Ç–æ–∂—å –ò–º–ø–µ—Ä–∏—é –°–∫–∏–Ω–æ–≤ ‚öîÔ∏è</p>
          
          {renderContent()}
        </div>
        <div className="footer-container">
          <br/>
          <div className="footer-text">
            Hey Jojo, built by @krutovoy
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
